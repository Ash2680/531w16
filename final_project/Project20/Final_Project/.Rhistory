cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd
)
)
}
})
},seed=900242057,kind="L'Ecuyer")
source('~/.active-rstudio-document', echo=TRUE)
bsflu <- read.table("bsflu_data.txt")
sir_step <- Csnippet("
double dN_SI = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_IR = rbinom(I,1-exp(-gamma*dt));
S -= dN_SI;
I += dN_SI - dN_IR;
R += dN_IR;
H += dN_IR;
")
sir_init <- Csnippet("
S = nearbyint(N)-1;
I = 1;
R = 0;
H = 0;
")
dmeas <- Csnippet("lik = dbinom(B,H,rho,give_log);")
rmeas <- Csnippet("B = rbinom(H,rho);")
pomp(bsflu,times="day",t0=0,
rprocess=euler.sim(sir_step,delta.t=1/5),
initializer=sir_init,rmeasure=rmeas,dmeasure=dmeas,
zeronames="H",statenames=c("H","S","I","R"),
paramnames=c("Beta","gamma","rho","N")) -> sir
simulate(sir,params=c(Beta=2,gamma=1,rho=0.5,N=2600),
nsim=10000,states=TRUE) -> x
matplot(time(sir),t(x["H",1:50,]),type='l',lty=1,
xlab="time",ylab="H",bty='l',col='blue')
lines(time(sir),obs(sir,"B"),lwd=2,col='black')
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
(bsflu_obsnames <- colnames(bsflu_data)[1:2])
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
plot(bsflu2)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
require(doParallel)
cores <- 2  # The number of cores on this machine
registerDoParallel(cores)
mcopts <- list(set.seed=TRUE)
set.seed(396658101,kind="L'Ecuyer")
stew(file=sprintf("pf-%d.rda",run_level),{
t_pf <- system.time(
pf <- foreach(i=1:20,.packages='pomp',
.options.multicore=mcopts) %dopar% try(
pfilter(bsflu2,params=bsflu_mle,Np=bsflu_Np)
)
)
},seed=1320290398,kind="L'Ecuyer")
(L_pf <- logmeanexp(sapply(pf,logLik),se=TRUE))
class(bsflu2)
bsflu2
cl <- makeCluster(4)
registerDoParallel(cl)
clusterExport(cl,"bsflu_rw.sd")
stew(file=sprintf("local_search-%d.rda",run_level),{
t_local <- system.time({
mifs_local <- foreach(i=1:bsflu_Nlocal,
.packages='pomp',
.combine=c,
.options.multicore=mcopts,
.export=c("bsflu2", "bsflu_Nmif", "bsflu_mle", "bsflu_Np","bsflu_cooling.fraction.50", "bsflu_rw.sd")
) %dopar% {
mif2(
bsflu2,
start=bsflu_mle,
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd)
)
}
})
},seed=900242057,kind="L'Ecuyer")
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
(bsflu_obsnames <- colnames(bsflu_data)[1:2])
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
plot(bsflu2)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
require(doParallel)
cores <- 2  # The number of cores on this machine
registerDoParallel(cores)
mcopts <- list(set.seed=TRUE)
set.seed(396658101,kind="L'Ecuyer")
bsflu_rw.sd <- 0.02
bsflu_cooling.fraction.50 <- 0.1
?makeCluster
?registerDoParallel
cl <- makeCluster(4)
registerDoParallel(cl)
clusterExport(cl,"bsflu_rw.sd")
stew(file=sprintf("local_search-%d.rda",run_level),{
t_local <- system.time({
mifs_local <- foreach(i=1:bsflu_Nlocal,
.packages='pomp',
.combine=c,
.options.multicore=mcopts,
.export=c("bsflu2", "bsflu_Nmif", "bsflu_mle", "bsflu_Np","bsflu_cooling.fraction.50", "bsflu_rw.sd")
) %dopar% {
mif2(
bsflu2,
start=bsflu_mle,
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd)
)
}
})
},seed=900242057,kind="L'Ecuyer")
```{r bsflu_params}
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
```
```{r fixed_params}
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
```
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
stew(file=sprintf("local_search-%d.rda",run_level),{
t_local <- system.time({
mifs_local <- foreach(i=1:bsflu_Nlocal,
.packages='pomp',
.combine=c,
.options.multicore=mcopts,
.export=c("bsflu2", "bsflu_Nmif", "bsflu_mle", "bsflu_Np","bsflu_cooling.fraction.50", "bsflu_rw.sd")
) %dopar% {
mif2(
bsflu2,
start=bsflu_mle,
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd)
)
}
})
},seed=900242057,kind="L'Ecuyer")
data <- read.table("Lancashire_data.txt",sep="",head=T)
lungdata <- data[which(data$Lung.Laryngx==0),]
lungdata <- lungdata[,1:2]
head(lungdata)
Eastings <- lungdata$Eastings
Northings <- lungdata$Northings
library(spatstat)
lungfit <- kppm(lungdata.pp,clusters="LGCP",method = "mincon",
statistic = "K",
control=list(c(sigma2=10, alpha=2)))
sim <- simulate(lungfit, nsim = 1000, seed=177)
class(sim)
plot(sim)
plot(sim$`Simulation 1`$x,sim$`Simulation 1`$y,
xlab="Eastings (km)",ylab="Northings  (km)", main = "Simulation 1")
lung.logcp <- lgcp.estK(lungdata.pp, c(sigma2=10, alpha=2))
plot(lung.logcp,main="Fitted K function and Theoretical K function
Lung Cancer Data, log Gaussian-Cox process")
plot(envelope(lungdata.pp,fun=lgcp.estK,nrank=1,nsim=1000))
plot(envelope(lungdata.pp,fun=Kest,nrank=1,nsim=1000))
data <- read.table("Lancashire_data.txt",sep="",head=T)
lungdata <- data[which(data$Lung.Laryngx==0),]
lungdata <- lungdata[,1:2]
head(lungdata)
Eastings <- lungdata$Eastings
Northings <- lungdata$Northings
plot(Eastings,Northings,
xlab = "Eastings (km)", ylab="Northings (km)",
main = "Location of New Cases of Lung Cancer in
Lancashire, England between 1974 and 1983")
library(spatstat)
lungdata.pp <- as.ppp(lungdata,c(345000,365000,410000,430000))
L.function <- Lest(lungdata.pp)
plot(L.function,main="L Function
Occurrences of Lung Cancer in Lancashire, England")
nsim <- 99
plot(L.csr, xlab="d (in kilometers)", ylab="L(d)",
main="L Plot of Lung Cancer Data")
plot(L.csr, xlab="r (in kilometers)", ylab="L(r)",
main="L Plot of Lung Cancer Data")
fit <- ppm(lungdata.pp~1)
quadrat.test(lungdata.pp,nx=5,ny=5,
alternative=c("two.sided"),
method="Chisq",fit)
quadrat.test(lungdata.pp,nx=5,ny=5,
alternative=c("regular"),
method="Chisq")
quadrat.test(lungdata.pp,nx=5,ny=5,
alternative=c("clustered"),
method="Chisq")
quadrat.test(lungdata.pp,nx=5,ny=5,
alternative=c("clustered"),
method="MonteCarlo",nsim=4999,conditional=TRUE)
library(splancs)
library(spatstat)
b <- bw.diggle(lungdata.pp)
plot(b, main="Cross validation for Lung Data")
plot(density.ppp(lungdata.pp, b), main="Kernel estimate of intensity function
using optimal bandwidth identified by Diggle")
library(spatstat)
lungfit <- kppm(lungdata.pp,clusters="LGCP",method = "mincon",
statistic = "K",
control=list(c(sigma2=10, alpha=2)))
names(lungfit)
summary(lungfit)
?kppm
?lgcp
lungfit.matern <- kppm(lungdata.pp,clusters="MatClust",method = "mincon",
statistic = "K",
control=list(c(kappa=(917/(pi*10000*10000)),
R=10000)))
summary(lungfit.matern)
dim(lungdata)
names(lungfit.matern)
lungfit.matern$clusters
names(lungfit.matern$clusters)
lungfit.matern$modelpar
lungfit.matern$covmodel
lungfit.matern$ClusterArgs
lungfit.inhomogenous <- kppm(lungdata.pp, trend = ~ x+y)
inhomclust <- envelope(lungdata.pp,fun=Kinhom,
inhomclust2 <- envelope(lungdata.pp,fun=Kinhom,nsim=nsim)
lambda=lungfit.inhomogenous,nsim=nsim)
plot(inhomclust2, main="Fitted K function and Theoretical K function
Lung Cancer Data, Inhomogenous Poisson Point Process")
lines(inhomclust, col="blue")
legend(x=3300,y=20000000,c("K_{inhom}^{fit}(r)"),lty=1,col="blue")
lungfit.inhomogenous <- kppm(lungdata.pp, trend = ~ x+y)
inhomclust <- envelope(lungdata.pp,fun=Kinhom,
lambda=lungfit.inhomogenous,nsim=nsim)
lungfit.inhomogenous <- ppm(lungdata.pp, trend = ~ x+y)
inhomclust <- envelope(lungdata.pp,fun=Kinhom,
lambda=lungfit.inhomogenous,nsim=nsim)
inhomclust2 <- envelope(lungdata.pp,fun=Kinhom,nsim=nsim)
plot(inhomclust2, main="Fitted K function and Theoretical K function
Lung Cancer Data, Inhomogenous Poisson Point Process")
lines(inhomclust, col="blue")
legend(x=3300,y=20000000,c("K_{inhom}^{fit}(r)"),lty=1,col="blue")
summary(lungfit.inhomogenous)
exp(1.703484e-05)
exp(4.608117e-05)
data <- read.csv("tycho_pnas.csv",header=TRUE,sep=",")
View(data)
data <- read.csv("tycho_pnas.csv",header=TRUE,sep="")
View(data)
data <- read.csv("tycho_pnas.csv",header=TRUE,sep=" ")
View(data)
data <- read.csv("tycho_pnas.csv",header=TRUE,sep=",")
View(data)
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",")
View(data)
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",",na.strings = "\N")
data <- read.csv("tycho_pnas.csv",header=TRUE,sep=",",na.strings = "\N")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",",na.strings = "\N")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",",na.strings = "NA")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",", na.strings = "NA")
View(data)
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",", na.strings = "NA")
data <- read.table("tycho_pnas.txt",header=TRUE,sep=",", na.strings = "NA")
require(spdep)
presdat <- read.csv("2010_Presidential_2nd_SP_win_turn_geo.csv",header=T,sep=";")
sp1dat <- read.csv("2010_SP1_census_sector.csv",header=T,sep=";")
sp2dat <- read.csv("2010_SP2_census_sector.csv",header=T,sep=";")
saopaulo <- file <- readOGR("C:\\Users\\User\\Google Drive\\Winter 2016\\Biostat 696 - Spatial Data Analysis\\project", "35SEE250GC_SIR")
```
saopaulo <- readOGR("C:\\Users\\User\\Google Drive\\Winter 2016\\Biostat 696 - Spatial Data Analysis\\project", "35SEE250GC_SIR")
require(maptools)
saopaulo <- readOGR("C:\\Users\\User\\Google Drive\\Winter 2016\\Biostat 696 - Spatial Data Analysis\\project", "35SEE250GC_SIR")
presdat <- read.csv("2010_Presidential_2nd_SP_win_turn_geo.csv",header=T,sep=";")
View(presdat)
censusdata <- read.csv("2010_SP2_census_sector_plus_centroids.csv",header=T,sep=",")
base_url <- "http://kingaa.github.io/sbied/"
read.csv(paste0(base_url,"data/ebola_data.csv"),stringsAsFactors=FALSE,
colClasses=c(date="Date")) -> dat
sapply(dat,class)
head(dat)
populations <- c(Guinea=10628972,Liberia=4092310,SierraLeone=6190280)
require(ggplot2)
dat %>%
ggplot(aes(x=date,y=cases,group=country,color=country))+
geom_line()
ggplot(aes(x=date,y=cases,group=country,color=country))+geom_line()
dat %>% ggplot(aes(x=date,y=cases,group=country,color=country))+geom_line()
rSim <- Csnippet('
double lambda, beta;
double *E = &E1;
beta = R0 * gamma; // Transmission rate
lambda = beta * I / N; // Force of infection
int i;
// Transitions
// From class S
double transS = rbinom(S, 1.0 - exp(- lambda * dt)); // No of infections
// From class E
double transE[nstageE]; // No of transitions between classes E
for(i = 0; i < nstageE; i++){
transE[i] = rbinom(E[i], 1.0 - exp(-nstageE * alpha * dt));
}
// From class I
double transI = rbinom(I, 1.0 - exp(-gamma * dt)); // No of transitions I->R
// Balance the equations
S -= transS;
E[0] += transS - transE[0];
for(i=1; i < nstageE; i++) {
E[i] += transE[i-1] - transE[i];
}
I += transE[nstageE-1] - transI;
R += transI;
N_EI += transE[nstageE-1]; // No of transitions from E to I
N_IR += transI; // No of transitions from I to R
'
)
?rnorm
dnorm(0.95)
dnorm(0.50)
dnorm(0)
dnorm(50)
dnorm(95)
dnorm(10)
dnorm(1)
dnorm(0.90)
dnorm(0.10)
?dbinom
library(pomp)
?"pomp"
pompExample(ricker)
class(ricker)
?euler.sim
?euler.sim
setwd("C:\\Users\\User\\Google Drive\\Winter 2016\\STAT 531 - Time Series Analysis\\Final Project\\R Code")
require(ggplot2)
require(plyr)
require(reshape2)
require(magrittr)
require(pomp)
delhi <- read.csv("delhi.csv",head=T)
sir_step <- Csnippet("
double dN_SE = rbinom(S,1-exp(-lambda*I/N*dt));
double dN_EI = rbinom(I,1-exp(-gamma*I*dt));
double dN_IQ = rbinom(I,1-exp(-alpha*Q*dt));
double dN_QR = rbinom(Q,1-exp(-eta*R*dt));
double dN_SV = rbinom(S,1-exp(-sigma*V*dt));
double dN_VS = rbinom(V,1-exp(-rho*S*dt));
double dN_RS = rbinom(R,1-exp(-epsilon*S*dt));
double dN_IR = rbinom(I,1-exp(-phi*R*dt));
S -= dN_SE - dN_SV + dN_VS + dN_RS;
E -= dN_EI + dN_SI;
I -= dN_IQ + dN_IR + dN_EI;
Q -= dN_QR + dN_IQ;
R -= dN_RS + dN_IR + dN_QR;
v -= dN_VS + dN_SV;
H += dN_IR;
")
##---initialize variables in r process----------------------------
sir_init <- Csnippet("
S = (N-1)/2;
E = (N-1)/2;
I = 1;
Q = 0;
R = 0;
V = 0;
H = 0;
")
sir <- pomp(delhi,time="month",t0=0,
rprocess=euler.sim(sir_step,delta.t=1/6),
initializer=sir_init,
paramnames=c("N","lambda","gamma","alpha","eta",
"sigma","rho","epsilon","phi"),
statenames=c("S","E","I","Q","R","V","H"))
source('~/.active-rstudio-document', echo=TRUE)
